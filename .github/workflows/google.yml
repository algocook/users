# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/GoogleCloudPlatform/github-actions/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  push:
    branches:
    - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: production-1
  GKE_ZONE: europe-north1-a
  DEPLOYMENT_NAME: users-deployment
  IMAGE: users-image

jobs:
  starting-deploy:
    name: Starting deployment
    runs-on: ubuntu-latest
    steps:
      - run: |-
          echo ${{ secrets.TELEGRAM_TOKEN }}
      
      - name: Telegram info started
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üçèüçèüçè
            
            DEPLOYMENT STARTED:
            
            ## ${{ github.repository }}
            
            üçèüçèüçè

  setup-build-publish-deploy:
    needs: [starting-deploy]
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

  ending-deployment:
    needs: [starting-deploy]
    name: Ending deployment
    runs-on: ubuntu-latest
    steps:
      - name: wait job1 completed
        id: job1_result
        shell: bash
        run: |
          status=""
          conclusion=""
          while [ "$status" != "completed" ]
          do
            response=$(curl --request GET \
            --url 'https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs' \
            --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Accept: application/vnd.github.v3+json')
                       
            status=$(echo $response | jq -r '.jobs[] | select(.name=="Setup, Build, Publish, and Deploy") | .status')
            echo $status
            if [[ $status == completed ]]; then
              conclusion=$(echo $response | jq -r '.jobs[] | select(.name=="Setup, Build, Publish, and Deploy") | .conclusion')
              echo $conclusion
            else
              sleep 10s
            fi
          done
          echo "::set-output name=status::$status"
          echo "::set-output name=conclusion::$conclusion"

      - name: Telegram info end deployment
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üçéüçéüçé
            
            DEPLOYMENT RESULTS:
            
            ## ${{ github.repository }}
            
            # STATUS = ${{ steps.job1_result.outputs.status }}
            # RESULT = ${{ steps.job1_result.outputs.conclusion }}
            
            üçéüçéüçé
